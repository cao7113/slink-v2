# https://taskfile.dev/usage/
version: "3"
vars:
  LOCAL_MAGIC_COOKIE: slink
  DOCKER_IMG_NAME: slinkv2
  DOCKER_CONTAINER_NAME: slinkv2
includes:
  # task f:iex
  flyio:
    taskfile: ./Taskfile-flyio.yml
    aliases: [f, fly]
    optional: true
tasks:
  default: mix test
  sh: iex --erl "-kernel shell_history enabled" -S mix
  run: iex --erl "-kernel shell_history enabled" -S mix phx.server
  run6:
    env:
      # local livebook deployed with ipv6
      ERL_AFLAGS: "-proto_dist inet6_tcp -kernel shell_history enabled"
      # RELEASE_DISTRIBUTION: name
    cmds:
      # iex(slink2@mac.local)1>
      - iex --name slink2 --cookie slink2 -S mix phx.server
  fmt: mix format

  ## DB ops
  pg: pgcli slink_v2_dev
  db.reset: |
    mix ecto.reset.force
    MIX_ENV=test mix ecto.reset.force
    run/dev.exs
    echo reset dev and test db

  ## Git ops
  ops.init: mix git_ops.release --initial
  ops.up: |
    mix git_ops.release --yes
    git push --follow-tags
    fly deploy
  ops.up.rel: mix git_ops.release
  ops.up.tag: git push --follow-tags
  ops.types: mix eh.git.ops.types
  ops.setup: |
    # run after add igniter dep in mix.exs
    mix igniter.install git_ops

  ## Remote Ops with WireGuard opened
  # https://fly.io/docs/elixir/advanced-guides/clustering-from-home-to-your-app-in-fly/
  # CLUSTER_APP_NAME=xxx task remote.connect6
  remote.connect6:
    aliases:
      - remote.s2
      - rc6
    env:
      ERL_AFLAGS: "-proto_dist inet6_tcp -kernel shell_history enabled"
      CLUSTER_APP_NAME: "slink-v2"
      RELEASE_COOKIE: happy-cookie-not-secret-but-for-cluster
    cmds:
      - echo "==Custerning into remote app ${CLUSTER_APP_NAME}"
      - run/cluster-with-remote.sh
  remote.s1:
    env:
      ERL_AFLAGS: "-proto_dist inet6_tcp -kernel shell_history enabled"
      CLUSTER_APP_NAME: "slink"
      RELEASE_COOKIE: slinkfuncookie
    cmds:
      - echo "==Custerning into remote app ${CLUSTER_APP_NAME}"
      - run/cluster-with-remote.sh

  # https://fly.io/docs/elixir/advanced-guides/connect-observer-to-your-app/
  # NOTE:
  # - If everything worked and itâ€™s connected, under the Nodes menu you should see the connected remote node.
  # - live-dashboard is better way!
  observer:
    aliases:
      - observe
    env:
      COOKIE: happy-cookie-not-secret-but-for-cluster
    cmds:
      - echo "==Observing remote app"
      - run/observer.sh

  ## Docker run env
  dk.build: docker build -t {{.DOCKER_IMG_NAME}} .
  # dk.run: |
  #   task dk.build
  #   docker rm -f {{.DOCKER_CONTAINER_NAME}}
  #   docker run --name {{.DOCKER_CONTAINER_NAME}} --rm -it -p 4010:4000 \
  #     -e "PHX_SERVER=true" \
  #     -e "SECRET_KEY_BASE=mock-test-secret-key-base" \
  #     -e "RELEASE_DISTRIBUTION=name" \
  #     -e "RELEASE_NODE=slink@{{.DOCKER_CONTAINER_NAME}}.orb.local" \
  #     -e "RELEASE_COOKIE={{.LOCAL_MAGIC_COOKIE}}" \
  #     {{.DOCKER_IMG_NAME}} bin/slink start_iex
  dk.iex: docker exec -it {{.DOCKER_CONTAINER_NAME}} bin/slink remote
  dk.in: docker exec -it {{.DOCKER_CONTAINER_NAME}} sh
  dk.sh: docker run --rm -it {{.DOCKER_IMG_NAME}} sh
  dk.info: |
    docker exec -it {{.DOCKER_CONTAINER_NAME}} bin/slink
  dk.ping: curl https://{{.DOCKER_CONTAINER_NAME}}.orb.local/ping | jq
  dk.down: docker stop {{.DOCKER_CONTAINER_NAME}}
  dk.test: |
    docker compose version
    docker compose up --quiet-pull --exit-code-from curl # --abort-on-container-exit

  setup: |
    mix deps.get
